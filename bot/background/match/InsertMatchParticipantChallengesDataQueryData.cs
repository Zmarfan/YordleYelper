using YordleYelper.bot.data_fetcher.league_api.responses.match;
using YordleYelper.database;
using YordleYelper.database.attributes;

namespace YordleYelper.bot.background.match; 

public class InsertMatchParticipantChallengesDataQueryData : IQueryData<VoidRecord> {
    [QueryParameter("p_puuid")] public readonly string puuid;
    [QueryParameter("p_match_id")] public readonly string matchId;
    [QueryParameter("p_12_assist_streak_count")] public readonly float twelveAssistStreakCount;
    [QueryParameter("p_ability_uses")] public readonly float abilityUses;
    [QueryParameter("p_aces_before_15_minutes")] public readonly float acesBefore15Minutes;
    [QueryParameter("p_allied_jungle_monster_kills")] public readonly float alliedJungleMonsterKills;
    [QueryParameter("p_baron_buff_gold_advantage_over_threshold")] public readonly float baronBuffGoldAdvantageOverThreshold;
    [QueryParameter("p_baron_takedowns")] public readonly float baronTakedowns;
    [QueryParameter("p_blast_cone_opposite_opponent_count")] public readonly float blastConeOppositeOpponentCount;
    [QueryParameter("p_bounty_gold")] public readonly float bountyGold;
    [QueryParameter("p_buffs_stolen")] public readonly float buffsStolen;
    [QueryParameter("p_complete_support_quest_in_time")] public readonly float completeSupportQuestInTime;
    [QueryParameter("p_control_wards_placed")] public readonly float controlWardsPlaced;
    [QueryParameter("p_control_ward_time_coverage_in_river_or_enemy_half")] public readonly float controlWardTimeCoverageInRiverOrEnemyHalf;
    [QueryParameter("p_damage_per_minute")] public readonly float damagePerMinute;
    [QueryParameter("p_damage_taken_on_team_percentage")] public readonly float damageTakenOnTeamPercentage;
    [QueryParameter("p_danced_with_rift_herald")] public readonly float dancedWithRiftHerald;
    [QueryParameter("p_deaths_by_enemy_champs")] public readonly float deathsByEnemyChamps;
    [QueryParameter("p_dodge_skill_shots_small_window")] public readonly float dodgeSkillShotsSmallWindow;
    [QueryParameter("p_double_aces")] public readonly float doubleAces;
    [QueryParameter("p_dragon_takedowns")] public readonly float dragonTakedowns;
    [QueryParameter("p_earliest_baron")] public readonly float earliestBaron;
    [QueryParameter("p_earliest_dragon_takedown")] public readonly float earliestDragonTakedown;
    [QueryParameter("p_earliest_elder_dragon")] public readonly float earliestElderDragon;
    [QueryParameter("p_early_laning_phase_gold_exp_advantage")] public readonly float earlyLaningPhaseGoldExpAdvantage;
    [QueryParameter("p_effective_heal_and_shielding")] public readonly float effectiveHealAndShielding;
    [QueryParameter("p_elder_dragon_kills_with_opposing_soul")] public readonly float elderDragonKillsWithOpposingSoul;
    [QueryParameter("p_elder_dragon_multikills")] public readonly float elderDragonMultikills;
    [QueryParameter("p_enemy_champion_immobilizations")] public readonly float enemyChampionImmobilizations;
    [QueryParameter("p_enemy_jungle_monster_kills")] public readonly float enemyJungleMonsterKills;
    [QueryParameter("p_epic_monster_kills_near_enemy_jungler")] public readonly float epicMonsterKillsNearEnemyJungler;
    [QueryParameter("p_epic_monster_kills_within_30_seconds_of_spawn")] public readonly float epicMonsterKillsWithin30SecondsOfSpawn;
    [QueryParameter("p_epic_monster_steals")] public readonly float epicMonsterSteals;
    [QueryParameter("p_epic_monster_stolen_without_smite")] public readonly float epicMonsterStolenWithoutSmite;
    [QueryParameter("p_faster_support_quest_completion")] public readonly float fasterSupportQuestCompletion;
    [QueryParameter("p_fastest_legendary")] public readonly float fastestLegendary;
    [QueryParameter("p_first_turret_killed")] public readonly float firstTurretKilled;
    [QueryParameter("p_first_turret_killed_time")] public readonly float firstTurretKilledTime;
    [QueryParameter("p_flawless_aces")] public readonly float flawlessAces;
    [QueryParameter("p_full_team_takedown")] public readonly float fullTeamTakedown;
    [QueryParameter("p_game_length")] public readonly float gameLength;
    [QueryParameter("p_get_takedowns_in_all_lanes_early_jungle_as_laner")] public readonly float getTakedownsInAllLanesEarlyJungleAsLaner;
    [QueryParameter("p_gold_per_minute")] public readonly float goldPerMinute;
    [QueryParameter("p_had_afk_teammate")] public readonly float hadAfkTeammate;
    [QueryParameter("p_had_open_nexus")] public readonly float hadOpenNexus;
    [QueryParameter("p_highest_champion_damage")] public readonly float highestChampionDamage;
    [QueryParameter("p_highest_crowd_control_score")] public readonly float highestCrowdControlScore;
    [QueryParameter("p_highest_ward_kills")] public readonly float highestWardKills;
    [QueryParameter("p_immobilize_and_kill_with_ally")] public readonly float immobilizeAndKillWithAlly;
    [QueryParameter("p_initial_buff_count")] public readonly float initialBuffCount;
    [QueryParameter("p_initial_crab_count")] public readonly float initialCrabCount;
    [QueryParameter("p_jungle_cs_before_10_minutes")] public readonly float jungleCsBefore10Minutes;
    [QueryParameter("p_jungler_kills_early_jungle")] public readonly float junglerKillsEarlyJungle;
    [QueryParameter("p_jungler_takedowns_near_damaged_epic_monster")] public readonly float junglerTakedownsNearDamagedEpicMonster;
    [QueryParameter("p_k_turrets_destroyed_before_plates_fall")] public readonly float kTurretsDestroyedBeforePlatesFall;
    [QueryParameter("p_kda")] public readonly float kda;
    [QueryParameter("p_kill_after_hidden_with_ally")] public readonly float killAfterHiddenWithAlly;
    [QueryParameter("p_kill_participation")] public readonly float killParticipation;
    [QueryParameter("p_killed_champ_took_full_team_damage_survived")] public readonly float killedChampTookFullTeamDamageSurvived;
    [QueryParameter("p_killing_sprees")] public readonly float killingSprees;
    [QueryParameter("p_kills_near_enemy_turret")] public readonly float killsNearEnemyTurret;
    [QueryParameter("p_kills_on_laners_early_jungle_as_jungler")] public readonly float killsOnLanersEarlyJungleAsJungler;
    [QueryParameter("p_kills_on_other_lanes_early_jungle_as_laner")] public readonly float killsOnOtherLanesEarlyJungleAsLaner;
    [QueryParameter("p_kills_on_recently_healed_by_aram_pack")] public readonly float killsOnRecentlyHealedByAramPack;
    [QueryParameter("p_kills_under_own_turret")] public readonly float killsUnderOwnTurret;
    [QueryParameter("p_kills_with_help_from_epic_monster")] public readonly float killsWithHelpFromEpicMonster;
    [QueryParameter("p_knock_enemy_into_team_and_kill")] public readonly float knockEnemyIntoTeamAndKill;
    [QueryParameter("p_land_skill_shots_early_game")] public readonly float landSkillShotsEarlyGame;
    [QueryParameter("p_lane_minions_first_10_minutes")] public readonly float laneMinionsFirst10Minutes;
    [QueryParameter("p_laning_phase_gold_exp_advantage")] public readonly float laningPhaseGoldExpAdvantage;
    [QueryParameter("p_legendary_count")] public readonly float legendaryCount;
    [QueryParameter("p_lost_an_inhibitor")] public readonly float lostAnInhibitor;
    [QueryParameter("p_max_cs_advantage_on_lane_opponent")] public readonly float maxCsAdvantageOnLaneOpponent;
    [QueryParameter("p_max_kill_deficit")] public readonly float maxKillDeficit;
    [QueryParameter("p_max_level_lead_lane_opponent")] public readonly float maxLevelLeadLaneOpponent;
    [QueryParameter("p_mejais_full_stack_in_time")] public readonly float mejaisFullStackInTime;
    [QueryParameter("p_more_enemy_jungle_than_opponent")] public readonly float moreEnemyJungleThanOpponent;
    [QueryParameter("p_most_wards_destroyed_one_sweeper")] public readonly float mostWardsDestroyedOneSweeper;
    [QueryParameter("p_multi_kill_one_spell")] public readonly float multiKillOneSpell;
    [QueryParameter("p_multikills")] public readonly float multikills;
    [QueryParameter("p_multikills_after_aggressive_flash")] public readonly float multikillsAfterAggressiveFlash;
    [QueryParameter("p_multi_turret_rift_herald_count")] public readonly float multiTurretRiftHeraldCount;
    [QueryParameter("p_mythic_item_used")] public readonly float mythicItemUsed;
    [QueryParameter("p_outer_turret_executes_before_10_minutes")] public readonly float outerTurretExecutesBefore10Minutes;
    [QueryParameter("p_outnumbered_kills")] public readonly float outnumberedKills;
    [QueryParameter("p_outnumbered_nexus_kill")] public readonly float outnumberedNexusKill;
    [QueryParameter("p_perfect_dragon_souls_taken")] public readonly float perfectDragonSoulsTaken;
    [QueryParameter("p_perfect_game")] public readonly float perfectGame;
    [QueryParameter("p_pick_kill_with_ally")] public readonly float pickKillWithAlly;
    [QueryParameter("p_played_champ_select_position")] public readonly float playedChampSelectPosition;
    [QueryParameter("p_poro_explosions")] public readonly float poroExplosions;
    [QueryParameter("p_quick_cleanse")] public readonly float quickCleanse;
    [QueryParameter("p_quick_first_turret")] public readonly float quickFirstTurret;
    [QueryParameter("p_quick_solo_kills")] public readonly float quickSoloKills;
    [QueryParameter("p_rift_herald_takedowns")] public readonly float riftHeraldTakedowns;
    [QueryParameter("p_save_ally_from_death")] public readonly float saveAllyFromDeath;
    [QueryParameter("p_scuttle_crab_kills")] public readonly float scuttleCrabKills;
    [QueryParameter("p_shortest_time_to_ace_from_first_takedown")] public readonly float shortestTimeToAceFromFirstTakedown;
    [QueryParameter("p_skillshots_dodged")] public readonly float skillshotsDodged;
    [QueryParameter("p_skillshots_hit")] public readonly float skillshotsHit;
    [QueryParameter("p_snowballs_hit")] public readonly float snowballsHit;
    [QueryParameter("p_solo_baron_kills")] public readonly float soloBaronKills;
    [QueryParameter("p_solo_turrets_lategame")] public readonly float soloTurretsLategame;
    [QueryParameter("p_solo_kills")] public readonly float soloKills;
    [QueryParameter("p_stealth_wards_placed")] public readonly float stealthWardsPlaced;
    [QueryParameter("p_survived_single_digit_hp_count")] public readonly float survivedSingleDigitHpCount;
    [QueryParameter("p_survived_three_immobilizes_in_fight")] public readonly float survivedThreeImmobilizesInFight;
    [QueryParameter("p_takedown_on_first_turret")] public readonly float takedownOnFirstTurret;
    [QueryParameter("p_takedowns")] public readonly float takedowns;
    [QueryParameter("p_takedowns_after_gaining_level_advantage")] public readonly float takedownsAfterGainingLevelAdvantage;
    [QueryParameter("p_takedowns_before_jungle_minion_spawn")] public readonly float takedownsBeforeJungleMinionSpawn;
    [QueryParameter("p_takedowns_first_xminutes")] public readonly float takedownsFirstXminutes;
    [QueryParameter("p_takedowns_first_25_minutes")] public readonly float takedownsFirst25Minutes;
    [QueryParameter("p_takedowns_in_alcove")] public readonly float takedownsInAlcove;
    [QueryParameter("p_takedowns_in_enemy_fountain")] public readonly float takedownsInEnemyFountain;
    [QueryParameter("p_team_baron_kills")] public readonly float teamBaronKills;
    [QueryParameter("p_team_damage_percentage")] public readonly float teamDamagePercentage;
    [QueryParameter("p_team_elder_dragon_kills")] public readonly float teamElderDragonKills;
    [QueryParameter("p_team_rift_herald_kills")] public readonly float teamRiftHeraldKills;
    [QueryParameter("p_teleport_takedowns")] public readonly float teleportTakedowns;
    [QueryParameter("p_third_inhibitor_destroyed_time")] public readonly float thirdInhibitorDestroyedTime;
    [QueryParameter("p_three_wards_one_sweeper_count")] public readonly float threeWardsOneSweeperCount;
    [QueryParameter("p_took_large_damage_survived")] public readonly float tookLargeDamageSurvived;
    [QueryParameter("p_turret_plates_taken")] public readonly float turretPlatesTaken;
    [QueryParameter("p_turret_takedowns")] public readonly float turretTakedowns;
    [QueryParameter("p_turrets_taken_with_rift_herald")] public readonly float turretsTakenWithRiftHerald;
    [QueryParameter("p_twenty_minions_in_3_seconds_count")] public readonly float twentyMinionsIn3SecondsCount;
    [QueryParameter("p_two_wards_one_sweeper_count")] public readonly float twoWardsOneSweeperCount;
    [QueryParameter("p_unseen_recalls")] public readonly float unseenRecalls;
    [QueryParameter("p_vision_score_advantage_lane_opponent")] public readonly float visionScoreAdvantageLaneOpponent;
    [QueryParameter("p_vision_score_per_minute")] public readonly float visionScorePerMinute;
    [QueryParameter("p_ward_takedowns")] public readonly float wardTakedowns;
    [QueryParameter("p_ward_takedowns_before_20_m")] public readonly float wardTakedownsBefore20M;
    [QueryParameter("p_wards_guarded")] public readonly float wardsGuarded;

    public string GetStoredProcedureName => "insert_match_participant_challenges_data";
    
    public InsertMatchParticipantChallengesDataQueryData(MatchDataResponse match, ParticipantResponse participant) {
        puuid = participant.puuid.ToString();
        matchId = match.MetaData.MatchId;
        twelveAssistStreakCount = participant.challenges.twelveAssistStreakCount;
        abilityUses = participant.challenges.abilityUses;
        acesBefore15Minutes = participant.challenges.acesBefore15Minutes;
        alliedJungleMonsterKills = participant.challenges.alliedJungleMonsterKills;
        baronBuffGoldAdvantageOverThreshold = participant.challenges.baronBuffGoldAdvantageOverThreshold;
        baronTakedowns = participant.challenges.baronTakedowns;
        blastConeOppositeOpponentCount = participant.challenges.blastConeOppositeOpponentCount;
        bountyGold = participant.challenges.bountyGold;
        buffsStolen = participant.challenges.buffsStolen;
        completeSupportQuestInTime = participant.challenges.completeSupportQuestInTime;
        controlWardsPlaced = participant.challenges.controlWardsPlaced;
        controlWardTimeCoverageInRiverOrEnemyHalf = participant.challenges.controlWardTimeCoverageInRiverOrEnemyHalf;
        damagePerMinute = participant.challenges.damagePerMinute;
        damageTakenOnTeamPercentage = participant.challenges.damageTakenOnTeamPercentage;
        dancedWithRiftHerald = participant.challenges.dancedWithRiftHerald;
        deathsByEnemyChamps = participant.challenges.deathsByEnemyChamps;
        dodgeSkillShotsSmallWindow = participant.challenges.dodgeSkillShotsSmallWindow;
        doubleAces = participant.challenges.doubleAces;
        dragonTakedowns = participant.challenges.dragonTakedowns;
        earliestBaron = participant.challenges.earliestBaron;
        earliestDragonTakedown = participant.challenges.earliestDragonTakedown;
        earliestElderDragon = participant.challenges.earliestElderDragon;
        earlyLaningPhaseGoldExpAdvantage = participant.challenges.earlyLaningPhaseGoldExpAdvantage;
        effectiveHealAndShielding = participant.challenges.effectiveHealAndShielding;
        elderDragonKillsWithOpposingSoul = participant.challenges.elderDragonKillsWithOpposingSoul;
        elderDragonMultikills = participant.challenges.elderDragonMultikills;
        enemyChampionImmobilizations = participant.challenges.enemyChampionImmobilizations;
        enemyJungleMonsterKills = participant.challenges.enemyJungleMonsterKills;
        epicMonsterKillsNearEnemyJungler = participant.challenges.epicMonsterKillsNearEnemyJungler;
        epicMonsterKillsWithin30SecondsOfSpawn = participant.challenges.epicMonsterKillsWithin30SecondsOfSpawn;
        epicMonsterSteals = participant.challenges.epicMonsterSteals;
        epicMonsterStolenWithoutSmite = participant.challenges.epicMonsterStolenWithoutSmite;
        fasterSupportQuestCompletion = participant.challenges.fasterSupportQuestCompletion;
        fastestLegendary = participant.challenges.fastestLegendary;
        firstTurretKilled = participant.challenges.firstTurretKilled;
        firstTurretKilledTime = participant.challenges.firstTurretKilledTime;
        flawlessAces = participant.challenges.flawlessAces;
        fullTeamTakedown = participant.challenges.fullTeamTakedown;
        gameLength = participant.challenges.gameLength;
        getTakedownsInAllLanesEarlyJungleAsLaner = participant.challenges.getTakedownsInAllLanesEarlyJungleAsLaner;
        goldPerMinute = participant.challenges.goldPerMinute;
        hadAfkTeammate = participant.challenges.hadAfkTeammate;
        hadOpenNexus = participant.challenges.hadOpenNexus;
        highestChampionDamage = participant.challenges.highestChampionDamage;
        highestCrowdControlScore = participant.challenges.highestCrowdControlScore;
        highestWardKills = participant.challenges.highestWardKills;
        immobilizeAndKillWithAlly = participant.challenges.immobilizeAndKillWithAlly;
        initialBuffCount = participant.challenges.initialBuffCount;
        initialCrabCount = participant.challenges.initialCrabCount;
        jungleCsBefore10Minutes = participant.challenges.jungleCsBefore10Minutes;
        junglerKillsEarlyJungle = participant.challenges.junglerKillsEarlyJungle;
        junglerTakedownsNearDamagedEpicMonster = participant.challenges.junglerTakedownsNearDamagedEpicMonster;
        kTurretsDestroyedBeforePlatesFall = participant.challenges.kTurretsDestroyedBeforePlatesFall;
        kda = participant.challenges.kda;
        killAfterHiddenWithAlly = participant.challenges.killAfterHiddenWithAlly;
        killParticipation = participant.challenges.killParticipation;
        killedChampTookFullTeamDamageSurvived = participant.challenges.killedChampTookFullTeamDamageSurvived;
        killingSprees = participant.challenges.killingSprees;
        killsNearEnemyTurret = participant.challenges.killsNearEnemyTurret;
        killsOnLanersEarlyJungleAsJungler = participant.challenges.killsOnLanersEarlyJungleAsJungler;
        killsOnOtherLanesEarlyJungleAsLaner = participant.challenges.killsOnOtherLanesEarlyJungleAsLaner;
        killsOnRecentlyHealedByAramPack = participant.challenges.killsOnRecentlyHealedByAramPack;
        killsUnderOwnTurret = participant.challenges.killsUnderOwnTurret;
        killsWithHelpFromEpicMonster = participant.challenges.killsWithHelpFromEpicMonster;
        knockEnemyIntoTeamAndKill = participant.challenges.knockEnemyIntoTeamAndKill;
        landSkillShotsEarlyGame = participant.challenges.landSkillShotsEarlyGame;
        laneMinionsFirst10Minutes = participant.challenges.laneMinionsFirst10Minutes;
        laningPhaseGoldExpAdvantage = participant.challenges.laningPhaseGoldExpAdvantage;
        legendaryCount = participant.challenges.legendaryCount;
        lostAnInhibitor = participant.challenges.lostAnInhibitor;
        maxCsAdvantageOnLaneOpponent = participant.challenges.maxCsAdvantageOnLaneOpponent;
        maxKillDeficit = participant.challenges.maxKillDeficit;
        maxLevelLeadLaneOpponent = participant.challenges.maxLevelLeadLaneOpponent;
        mejaisFullStackInTime = participant.challenges.mejaisFullStackInTime;
        moreEnemyJungleThanOpponent = participant.challenges.moreEnemyJungleThanOpponent;
        mostWardsDestroyedOneSweeper = participant.challenges.mostWardsDestroyedOneSweeper;
        multiKillOneSpell = participant.challenges.multiKillOneSpell;
        multikills = participant.challenges.multikills;
        multikillsAfterAggressiveFlash = participant.challenges.multikillsAfterAggressiveFlash;
        multiTurretRiftHeraldCount = participant.challenges.multiTurretRiftHeraldCount;
        mythicItemUsed = participant.challenges.mythicItemUsed;
        outerTurretExecutesBefore10Minutes = participant.challenges.outerTurretExecutesBefore10Minutes;
        outnumberedKills = participant.challenges.outnumberedKills;
        outnumberedNexusKill = participant.challenges.outnumberedNexusKill;
        perfectDragonSoulsTaken = participant.challenges.perfectDragonSoulsTaken;
        perfectGame = participant.challenges.perfectGame;
        pickKillWithAlly = participant.challenges.pickKillWithAlly;
        playedChampSelectPosition = participant.challenges.playedChampSelectPosition;
        poroExplosions = participant.challenges.poroExplosions;
        quickCleanse = participant.challenges.quickCleanse;
        quickFirstTurret = participant.challenges.quickFirstTurret;
        quickSoloKills = participant.challenges.quickSoloKills;
        riftHeraldTakedowns = participant.challenges.riftHeraldTakedowns;
        saveAllyFromDeath = participant.challenges.saveAllyFromDeath;
        scuttleCrabKills = participant.challenges.scuttleCrabKills;
        shortestTimeToAceFromFirstTakedown = participant.challenges.shortestTimeToAceFromFirstTakedown;
        skillshotsDodged = participant.challenges.skillshotsDodged;
        skillshotsHit = participant.challenges.skillshotsHit;
        snowballsHit = participant.challenges.snowballsHit;
        soloBaronKills = participant.challenges.soloBaronKills;
        soloTurretsLategame = participant.challenges.soloTurretsLategame;
        soloKills = participant.challenges.soloKills;
        stealthWardsPlaced = participant.challenges.stealthWardsPlaced;
        survivedSingleDigitHpCount = participant.challenges.survivedSingleDigitHpCount;
        survivedThreeImmobilizesInFight = participant.challenges.survivedThreeImmobilizesInFight;
        takedownOnFirstTurret = participant.challenges.takedownOnFirstTurret;
        takedowns = participant.challenges.takedowns;
        takedownsAfterGainingLevelAdvantage = participant.challenges.takedownsAfterGainingLevelAdvantage;
        takedownsBeforeJungleMinionSpawn = participant.challenges.takedownsBeforeJungleMinionSpawn;
        takedownsFirstXminutes = participant.challenges.takedownsFirstXminutes;
        takedownsFirst25Minutes = participant.challenges.takedownsFirst25Minutes;
        takedownsInAlcove = participant.challenges.takedownsInAlcove;
        takedownsInEnemyFountain = participant.challenges.takedownsInEnemyFountain;
        teamBaronKills = participant.challenges.teamBaronKills;
        teamDamagePercentage = participant.challenges.teamDamagePercentage;
        teamElderDragonKills = participant.challenges.teamElderDragonKills;
        teamRiftHeraldKills = participant.challenges.teamRiftHeraldKills;
        teleportTakedowns = participant.challenges.teleportTakedowns;
        thirdInhibitorDestroyedTime = participant.challenges.thirdInhibitorDestroyedTime;
        threeWardsOneSweeperCount = participant.challenges.threeWardsOneSweeperCount;
        tookLargeDamageSurvived = participant.challenges.tookLargeDamageSurvived;
        turretPlatesTaken = participant.challenges.turretPlatesTaken;
        turretTakedowns = participant.challenges.turretTakedowns;
        turretsTakenWithRiftHerald = participant.challenges.turretsTakenWithRiftHerald;
        twentyMinionsIn3SecondsCount = participant.challenges.twentyMinionsIn3SecondsCount;
        twoWardsOneSweeperCount = participant.challenges.twoWardsOneSweeperCount;
        unseenRecalls = participant.challenges.unseenRecalls;
        visionScoreAdvantageLaneOpponent = participant.challenges.visionScoreAdvantageLaneOpponent;
        visionScorePerMinute = participant.challenges.visionScorePerMinute;
        wardTakedowns = participant.challenges.wardTakedowns;
        wardTakedownsBefore20M = participant.challenges.wardTakedownsBefore20M;
        wardsGuarded = participant.challenges.wardsGuarded;
    }

}