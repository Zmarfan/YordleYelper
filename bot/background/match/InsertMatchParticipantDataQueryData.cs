using YordleYelper.bot.data_fetcher.league_api.responses.match;
using YordleYelper.database;
using YordleYelper.database.attributes;

namespace YordleYelper.bot.background.match; 

public class InsertMatchParticipantDataQueryData : IQueryData<VoidRecord> {
    [QueryParameter("p_puuid")] public readonly string puuid;
    [QueryParameter("p_match_id")] public readonly string matchId;
    [QueryParameter("p_left_team")] public readonly bool leftTeam;
    [QueryParameter("p_participant_id")] public readonly int participantId;
    [QueryParameter("p_summoner_name")] public readonly string summonerName;
    [QueryParameter("p_summoner_level")] public readonly int summonerLevel;
    [QueryParameter("p_profile_icon_id")] public readonly int profileIconId;
    [QueryParameter("p_win")] public readonly bool win;
    [QueryParameter("p_game_ended_in_early_surrender")] public readonly bool gameEndedInEarlySurrender;
    [QueryParameter("p_game_ended_in_surrender")] public readonly bool gameEndedInSurrender;
    [QueryParameter("p_team_early_surrendered")] public readonly bool teamEarlySurrendered;
    [QueryParameter("p_kills")] public readonly int kills;
    [QueryParameter("p_deaths")] public readonly int deaths;
    [QueryParameter("p_assists")] public readonly int assists;
    [QueryParameter("p_team_position")] public readonly string teamPosition;
    [QueryParameter("p_time_played")] public readonly int timePlayed;
    [QueryParameter("p_baron_kills")] public readonly int baronKills;
    [QueryParameter("p_dragon_kills")] public readonly int dragonKills;
    [QueryParameter("p_bounty_level")] public readonly int bountyLevel;
    [QueryParameter("p_double_kills")] public readonly int doubleKills;
    [QueryParameter("p_triple_kills")] public readonly int tripleKills;
    [QueryParameter("p_quadra_kills")] public readonly int quadraKills;
    [QueryParameter("p_penta_kills")] public readonly int pentaKills;
    [QueryParameter("p_unreal_kills")] public readonly int unrealKills;
    [QueryParameter("p_killing_sprees")] public readonly int killingSprees;
    [QueryParameter("p_largest_killing_spree")] public readonly int largestKillingSpree;
    [QueryParameter("p_largest_multi_kill")] public readonly int largestMultiKill;
    [QueryParameter("p_champion_id")] public readonly int championId;
    [QueryParameter("p_champion_name")] public readonly string championName;
    [QueryParameter("p_champion_experience")] public readonly int championExperience;
    [QueryParameter("p_champion_level")] public readonly int championLevel;
    [QueryParameter("p_champion_transform")] public readonly int championTransform;
    [QueryParameter("p_primary_perk_style")] public readonly int primaryPerkStyle;
    [QueryParameter("p_primary_perk")] public readonly int primaryPerk;
    [QueryParameter("p_primary_perk_var_1")] public readonly int primaryPerkVar1;
    [QueryParameter("p_primary_perk_var_2")] public readonly int primaryPerkVar2;
    [QueryParameter("p_primary_perk_var_3")] public readonly int primaryPerkVar3;
    [QueryParameter("p_primary_perk_1")] public readonly int primaryPerk1;
    [QueryParameter("p_primary_perk_1_var_1")] public readonly int primaryPerk1Var1;
    [QueryParameter("p_primary_perk_1_var_2")] public readonly int primaryPerk1Var2;
    [QueryParameter("p_primary_perk_1_var_3")] public readonly int primaryPerk1Var3;
    [QueryParameter("p_primary_perk_2")] public readonly int primaryPerk2;
    [QueryParameter("p_primary_perk_2_var_1")] public readonly int primaryPerk2Var1;
    [QueryParameter("p_primary_perk_2_var_2")] public readonly int primaryPerk2Var2;
    [QueryParameter("p_primary_perk_2_var_3")] public readonly int primaryPerk2Var3;
    [QueryParameter("p_primary_perk_3")] public readonly int primaryPerk3;
    [QueryParameter("p_primary_perk_3_var_1")] public readonly int primaryPerk3Var1;
    [QueryParameter("p_primary_perk_3_var_2")] public readonly int primaryPerk3Var2;
    [QueryParameter("p_primary_perk_3_var_3")] public readonly int primaryPerk3Var3;
    [QueryParameter("p_secondary_perk_style")] public readonly int secondaryPerkStyle;
    [QueryParameter("p_secondary_perk_1")] public readonly int secondaryPerk1;
    [QueryParameter("p_secondary_perk_1_var_1")] public readonly int secondaryPerk1Var1;
    [QueryParameter("p_secondary_perk_1_var_2")] public readonly int secondaryPerk1Var2;
    [QueryParameter("p_secondary_perk_1_var_3")] public readonly int secondaryPerk1Var3;
    [QueryParameter("p_secondary_perk_2")] public readonly int secondaryPerk2;
    [QueryParameter("p_secondary_perk_2_var_1")] public readonly int secondaryPerk2Var1;
    [QueryParameter("p_secondary_perk_2_var_2")] public readonly int secondaryPerk2Var2;
    [QueryParameter("p_secondary_perk_2_var_3")] public readonly int secondaryPerk2Var3;
    [QueryParameter("p_stat_perk_offensive")] public readonly int statPerkOffensive;
    [QueryParameter("p_stat_perk_flex")] public readonly int statPerkFlex;
    [QueryParameter("p_stat_perk_defensive")] public readonly int statPerkDefensive;
    [QueryParameter("p_spell_q_casts")] public readonly int spellQCasts;
    [QueryParameter("p_spell_w_casts")] public readonly int spellWCasts;
    [QueryParameter("p_spell_e_casts")] public readonly int spellECasts;
    [QueryParameter("p_spell_r_casts")] public readonly int spellRCasts;
    [QueryParameter("p_summoner_1_id")] public readonly int summoner1Id;
    [QueryParameter("p_summoner_2_id")] public readonly int summoner2Id;
    [QueryParameter("p_summoner_1_casts")] public readonly int summoner1Casts;
    [QueryParameter("p_summoner_2_casts")] public readonly int summoner2Casts;
    [QueryParameter("p_gold_earned")] public readonly int goldEarned;
    [QueryParameter("p_gold_spent")] public readonly int goldSpent;
    [QueryParameter("p_consumables_purchased")] public readonly int consumablesPurchased;
    [QueryParameter("p_items_purchased")] public readonly int itemsPurchased;
    [QueryParameter("p_sight_wards_bought_in_game")] public readonly int sightWardsBoughtInGame;
    [QueryParameter("p_vision_wards_bought_in_game")] public readonly int visionWardsBoughtInGame;
    [QueryParameter("p_item0")] public readonly int item0;
    [QueryParameter("p_item1")] public readonly int item1;
    [QueryParameter("p_item2")] public readonly int item2;
    [QueryParameter("p_item3")] public readonly int item3;
    [QueryParameter("p_item4")] public readonly int item4;
    [QueryParameter("p_item5")] public readonly int item5;
    [QueryParameter("p_item6")] public readonly int item6;
    [QueryParameter("p_first_blood_assist")] public readonly bool firstBloodAssist;
    [QueryParameter("p_first_blood_kill")] public readonly bool firstBloodKill;
    [QueryParameter("p_first_tower_assist")] public readonly bool firstTowerAssist;
    [QueryParameter("p_first_tower_kill")] public readonly bool firstTowerKill;
    [QueryParameter("p_turret_kills")] public readonly int turretKills;
    [QueryParameter("p_turret_takedowns")] public readonly int turretTakedowns;
    [QueryParameter("p_turrets_lost")] public readonly int turretsLost;
    [QueryParameter("p_inhibitor_kills")] public readonly int inhibitorKills;
    [QueryParameter("p_inhibitor_takedowns")] public readonly int inhibitorTakedowns;
    [QueryParameter("p_inhibitors_lost")] public readonly int inhibitorsLost;
    [QueryParameter("p_damage_dealt_to_buildings")] public readonly int damageDealtToBuildings;
    [QueryParameter("p_damage_dealt_to_objectives")] public readonly int damageDealtToObjectives;
    [QueryParameter("p_damage_dealt_to_turrets")] public readonly int damageDealtToTurrets;
    [QueryParameter("p_damage_self_mitigated")] public readonly int damageSelfMitigated;
    [QueryParameter("p_nexus_kills")] public readonly int nexusKills;
    [QueryParameter("p_nexus_lost")] public readonly int nexusLost;
    [QueryParameter("p_nexus_takedowns")] public readonly int nexusTakedowns;
    [QueryParameter("p_total_minions_killed")] public readonly int totalMinionsKilled;
    [QueryParameter("p_neutral_minions_killed")] public readonly int neutralMinionsKilled;
    [QueryParameter("p_total_ally_jungle_minions_killed")] public readonly int totalAllyJungleMinionsKilled;
    [QueryParameter("p_total_enemy_jungle_minions_killed")] public readonly int totalEnemyJungleMinionsKilled;
    [QueryParameter("p_total_damage_dealt")] public readonly int totalDamageDealt;
    [QueryParameter("p_total_damage_dealt_to_champions")] public readonly int totalDamageDealtToChampions;
    [QueryParameter("p_total_damage_shielded_on_teammates")] public readonly int totalDamageShieldedOnTeammates;
    [QueryParameter("p_total_damage_taken")] public readonly int totalDamageTaken;
    [QueryParameter("p_total_heal")] public readonly int totalHeal;
    [QueryParameter("p_total_heals_on_teammates")] public readonly int totalHealsOnTeammates;
    [QueryParameter("p_largest_critical_strike")] public readonly int largestCriticalStrike;
    [QueryParameter("p_longest_time_spent_living")] public readonly int longestTimeSpentLiving;
    [QueryParameter("p_magic_damage_dealt")] public readonly int magicDamageDealt;
    [QueryParameter("p_magic_damage_dealt_to_champions")] public readonly int magicDamageDealtToChampions;
    [QueryParameter("p_magic_damage_taken")] public readonly int magicDamageTaken;
    [QueryParameter("p_true_damage_dealt")] public readonly int trueDamageDealt;
    [QueryParameter("p_true_damage_dealt_to_champions")] public readonly int trueDamageDealtToChampions;
    [QueryParameter("p_true_damage_taken")] public readonly int trueDamageTaken;
    [QueryParameter("p_objectives_stolen")] public readonly int objectivesStolen;
    [QueryParameter("p_objectives_stolen_assists")] public readonly int objectivesStolenAssists;
    [QueryParameter("p_physical_damage_dealt")] public readonly int physicalDamageDealt;
    [QueryParameter("p_physical_damage_dealt_to_champions")] public readonly int physicalDamageDealtToChampions;
    [QueryParameter("p_physical_damage_taken")] public readonly int physicalDamageTaken;
    [QueryParameter("p_time_cc_ing_others")] public readonly int timeCcIngOthers;
    [QueryParameter("p_total_time_cc_dealt")] public readonly int totalTimeCcDealt;
    [QueryParameter("p_total_time_spent_dead")] public readonly int totalTimeSpentDead;
    [QueryParameter("p_total_units_healed")] public readonly int totalUnitsHealed;
    [QueryParameter("p_vision_score")] public readonly int visionScore;
    [QueryParameter("p_detector_wards_placed")] public readonly int detectorWardsPlaced;
    [QueryParameter("p_wards_killed")] public readonly int wardsKilled;
    [QueryParameter("p_wards_placed")] public readonly int wardsPlaced;
    [QueryParameter("p_all_in_pings")] public readonly int allInPings;
    [QueryParameter("p_assist_me_pings")] public readonly int assistMePings;
    [QueryParameter("p_bait_pings")] public readonly int baitPings;
    [QueryParameter("p_basic_pings")] public readonly int basicPings;
    [QueryParameter("p_command_pings")] public readonly int commandPings;
    [QueryParameter("p_danger_pings")] public readonly int dangerPings;
    [QueryParameter("p_enemy_missing_pings")] public readonly int enemyMissingPings;
    [QueryParameter("p_enemy_vision_pings")] public readonly int enemyVisionPings;
    [QueryParameter("p_get_back_pings")] public readonly int getBackPings;
    [QueryParameter("p_hold_pings")] public readonly int holdPings;
    [QueryParameter("p_need_vision_pings")] public readonly int needVisionPings;
    [QueryParameter("p_on_my_way_pings")] public readonly int onMyWayPings;
    [QueryParameter("p_push_pings")] public readonly int pushPings;
    [QueryParameter("p_vision_cleared_pings")] public readonly int visionClearedPings;

    public string GetStoredProcedureName => "insert_match_participant_data";
    
    public InsertMatchParticipantDataQueryData(MatchDataResponse match, ParticipantResponse participant) {
        puuid = participant.puuid.ToString();
        matchId = match.MetaData.MatchId;
        leftTeam = participant.leftTeam;
        participantId = participant.participantId;
        summonerName = participant.summonerName;
        summonerLevel = participant.summonerLevel;
        profileIconId = participant.profileIconId;
        win = participant.win;
        gameEndedInEarlySurrender = participant.gameEndedInEarlySurrender;
        gameEndedInSurrender = participant.gameEndedInSurrender;
        teamEarlySurrendered = participant.teamEarlySurrendered;
        kills = participant.kills;
        deaths = participant.deaths;
        assists = participant.assists;
        teamPosition = participant.teamPosition;
        timePlayed = participant.timePlayed;
        baronKills = participant.baronKills;
        dragonKills = participant.dragonKills;
        bountyLevel = participant.bountyLevel;
        doubleKills = participant.doubleKills;
        tripleKills = participant.tripleKills;
        quadraKills = participant.quadraKills;
        pentaKills = participant.pentaKills;
        unrealKills = participant.unrealKills;
        killingSprees = participant.killingSprees;
        largestKillingSpree = participant.largestKillingSpree;
        largestMultiKill = participant.largestMultiKill;
        championId = participant.championId;
        championName = participant.championName;
        championExperience = participant.championExperience;
        championLevel = participant.championLevel;
        championTransform = participant.championTransform;
        primaryPerkStyle = participant.perks.Primary.Style;
        primaryPerk = participant.perks.Primary.Selections[0].Perk;
        primaryPerkVar1 = participant.perks.Primary.Selections[0].Var1;
        primaryPerkVar2 = participant.perks.Primary.Selections[0].Var2;
        primaryPerkVar3 = participant.perks.Primary.Selections[0].Var3;
        primaryPerk1 = participant.perks.Primary.Selections[1].Perk;
        primaryPerk1Var1 = participant.perks.Primary.Selections[1].Var1;
        primaryPerk1Var2 = participant.perks.Primary.Selections[1].Var2;
        primaryPerk1Var3 = participant.perks.Primary.Selections[1].Var3;
        primaryPerk2 = participant.perks.Primary.Selections[2].Perk;
        primaryPerk2Var1 = participant.perks.Primary.Selections[2].Var1;
        primaryPerk2Var2 = participant.perks.Primary.Selections[2].Var2;
        primaryPerk2Var3 = participant.perks.Primary.Selections[2].Var3;
        primaryPerk3 = participant.perks.Primary.Selections[3].Perk;
        primaryPerk3Var1 = participant.perks.Primary.Selections[3].Var1;
        primaryPerk3Var2 = participant.perks.Primary.Selections[3].Var2;
        primaryPerk3Var3 = participant.perks.Primary.Selections[3].Var3;
        secondaryPerkStyle = participant.perks.Secondary.Style;
        secondaryPerk1 = participant.perks.Secondary.Selections[0].Perk;
        secondaryPerk1Var1 = participant.perks.Secondary.Selections[0].Var1;
        secondaryPerk1Var2 = participant.perks.Secondary.Selections[0].Var2;
        secondaryPerk1Var3 = participant.perks.Secondary.Selections[0].Var3;
        secondaryPerk2 = participant.perks.Secondary.Selections[1].Perk;
        secondaryPerk2Var1 = participant.perks.Secondary.Selections[1].Var1;
        secondaryPerk2Var2 = participant.perks.Secondary.Selections[1].Var2;
        secondaryPerk2Var3 = participant.perks.Secondary.Selections[1].Var3;
        statPerkOffensive = participant.perks.Offense.code;
        statPerkFlex = participant.perks.Flex.code;
        statPerkDefensive = participant.perks.Defense.code;
        spellQCasts = participant.spellQCasts;
        spellWCasts = participant.spellWCasts;
        spellECasts = participant.spellECasts;
        spellRCasts = participant.spellRCasts;
        summoner1Id = participant.summoner1Id;
        summoner2Id = participant.summoner2Id;
        summoner1Casts = participant.summoner1Casts;
        summoner2Casts = participant.summoner2Casts;
        goldEarned = participant.goldEarned;
        goldSpent = participant.goldSpent;
        consumablesPurchased = participant.consumablesPurchased;
        itemsPurchased = participant.itemsPurchased;
        sightWardsBoughtInGame = participant.sightWardsBoughtInGame;
        visionWardsBoughtInGame = participant.visionWardsBoughtInGame;
        item0 = participant.item0;
        item1 = participant.item1;
        item2 = participant.item2;
        item3 = participant.item3;
        item4 = participant.item4;
        item5 = participant.item5;
        item6 = participant.item6;
        firstBloodAssist = participant.firstBloodAssist;
        firstBloodKill = participant.firstBloodKill;
        firstTowerAssist = participant.firstTowerAssist;
        firstTowerKill = participant.firstTowerKill;
        turretKills = participant.turretKills;
        turretTakedowns = participant.turretTakedowns;
        turretsLost = participant.turretsLost;
        inhibitorKills = participant.inhibitorKills;
        inhibitorTakedowns = participant.inhibitorTakedowns;
        inhibitorsLost = participant.inhibitorsLost;
        damageDealtToBuildings = participant.damageDealtToBuildings;
        damageDealtToObjectives = participant.damageDealtToObjectives;
        damageDealtToTurrets = participant.damageDealtToTurrets;
        damageSelfMitigated = participant.damageSelfMitigated;
        nexusKills = participant.nexusKills;
        nexusLost = participant.nexusLost;
        nexusTakedowns = participant.nexusTakedowns;
        totalMinionsKilled = participant.totalMinionsKilled;
        neutralMinionsKilled = participant.neutralMinionsKilled;
        totalAllyJungleMinionsKilled = participant.totalAllyJungleMinionsKilled;
        totalEnemyJungleMinionsKilled = participant.totalEnemyJungleMinionsKilled;
        totalDamageDealt = participant.totalDamageDealt;
        totalDamageDealtToChampions = participant.totalDamageDealtToChampions;
        totalDamageShieldedOnTeammates = participant.totalDamageShieldedOnTeammates;
        totalDamageTaken = participant.totalDamageTaken;
        totalHeal = participant.totalHeal;
        totalHealsOnTeammates = participant.totalHealsOnTeammates;
        largestCriticalStrike = participant.largestCriticalStrike;
        longestTimeSpentLiving = participant.longestTimeSpentLiving;
        magicDamageDealt = participant.magicDamageDealt;
        magicDamageDealtToChampions = participant.magicDamageDealtToChampions;
        magicDamageTaken = participant.magicDamageTaken;
        trueDamageDealt = participant.trueDamageDealt;
        trueDamageDealtToChampions = participant.trueDamageDealtToChampions;
        trueDamageTaken = participant.trueDamageTaken;
        objectivesStolen = participant.objectivesStolen;
        objectivesStolenAssists = participant.objectivesStolenAssists;
        physicalDamageDealt = participant.physicalDamageDealt;
        physicalDamageDealtToChampions = participant.physicalDamageDealtToChampions;
        physicalDamageTaken = participant.physicalDamageTaken;
        timeCcIngOthers = participant.timeCCingOthers;
        totalTimeCcDealt = participant.totalTimeCCDealt;
        totalTimeSpentDead = participant.totalTimeSpentDead;
        totalUnitsHealed = participant.totalUnitsHealed;
        visionScore = participant.visionScore;
        detectorWardsPlaced = participant.detectorWardsPlaced;
        wardsKilled = participant.wardsKilled;
        wardsPlaced = participant.wardsPlaced;
        allInPings = participant.allInPings;
        assistMePings = participant.assistMePings;
        baitPings = participant.baitPings;
        basicPings = participant.basicPings;
        commandPings = participant.commandPings;
        dangerPings = participant.dangerPings;
        enemyMissingPings = participant.enemyMissingPings;
        enemyVisionPings = participant.enemyVisionPings;
        getBackPings = participant.getBackPings;
        holdPings = participant.holdPings;
        needVisionPings = participant.needVisionPings;
        onMyWayPings = participant.onMyWayPings;
        pushPings = participant.pushPings;
        visionClearedPings = participant.visionClearedPings;
    }
}